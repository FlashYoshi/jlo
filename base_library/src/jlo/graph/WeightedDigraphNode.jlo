package jlo.graph;

import java.util.TreeSet;
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import jlo.tuple.Pair;
import java.util.PriorityQueue;
import jlo.association.AssociationEnd;
import jlo.association.Property;

/**
 * @param V the vertices (nodes) of the graph
 */
public abstract class WeightedDigraphNode<V,E,O extends V> extends AbstractDigraphNode<V> {

	connector edges O -> [WeightedAssociationEnd<? extends WeightedDigraphNode<? extends V,?,?>,?>];

	public WeightedDigraphNode(O o) {
	  subobject.object(o);
	}
	
	public List<? extends WeightedAssociationEnd<? extends WeightedDigraphNode<? extends V,?,?>,?>> edges() {		return #edges(object());	}

    public subobject object Property<O>;

    public O object() {    	return object.getValue();    }

	public double shortestDistanceTo(V v) {
	   Set<WeightedDigraphNode<? extends V,?,?>> done = new HashSet<WeightedDigraphNode<? extends V,?,?>>();
	   // The 'distances' queue keeps track of the nodes that must still be processed.
	   // The elements in the queue are pairs (double,V) where the double represents the current
	   // shortest distance to node v.
	   PriorityQueue<MyPair<WeightedDigraphNode<? extends V,?,?>>> distances = new PriorityQueue<MyPair<WeightedDigraphNode<? extends V,?,?>>>();
	   MyPair<WeightedDigraphNode<? extends V,?,?>> uPair = new MyPair<WeightedDigraphNode<? extends V,?,?>>(0d,this);
	   while(uPair!=null) {
	    WeightedDigraphNode<? extends V,?,?> u = uPair.right();
	    if(u.object().equals(v)) {
	      return uPair.left();
	    }
	    if(! done.contains(u)) {
	     done.add(u);
	     double distance = uPair.left();
	     List<? extends WeightedAssociationEnd> as = u.edges();
	     for(WeightedAssociationEnd a: as) {
	      List edges = a.edges();
	      for(Object edge: edges) {
	        WeightedDigraphNode target = (WeightedDigraphNode)a.otherEnd(u,edge); 
	        if(! done.contains(target)) {
	  	     double newDistance = distance + (double)a.weight(edge).weight();
	         MyPair newPair = new MyPair(newDistance,target);
	  	     distances.add(newPair);
	        }
	      }//for  
	     }//for
	   }//if
	   uPair = distances.poll();
	  }
	  return -1d;
	}
	
	private static class MyPair<T> implements Comparable<MyPair> {
	
		public MyPair(double d, T v) {
			_d=d;
			_v=v;
		}
	
	    public double left() {
	    	return _d;
	    }
	    
	    private double _d;
	    
	    public T right() {
	    	return _v;
	    }
	    
	    private T _v;
	
		public int hashCode() {
		    return (int)_d;
		}
		
		public boolean equals(Object other) {
			if(other instanceof MyPair) {
				return ((MyPair)other).left() == left(); 
			} else {
				return false;
			}
			
		}
		
		/**
		 * Reverse the sort because we use a priority queue
		 */
		public int compareTo(MyPair other) {
			double first = left();
			double second = other.left();
			if(first<second) {
				return -1;
			} else if (first == second) {
				return 0;
			} else {
				return 1;
			}
		}
	}
	
}
