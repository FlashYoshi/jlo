package jlo.association;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

/**
 * A MapProperty is an object that keeps a mapping between keys and values.
 *
 * To reduce memory consumption, a frugal list property will never store an internal
 * map if it is empty. This can be a disadvantage when the map property will
 * often switch between being empty and non-empty. If that is the case, then frugalness
 * can be disabled to reduced the number of internal collection objects that is created.
 */
public class MapProperty<K extends Object, V extends Object> {	
        
  /**
   * Create a new empty map property. The created map property is frugal.
   *
   * @post size() == 0;
   */
  public MapProperty() {
  }

  /**
   * Create a new empty map property with the given setting for the frugalness.
   *
   * @post size() == 0;
   * @post isFrugal() == frugal;
   */
  public MapProperty(boolean frugal) {
    _frugal = frugal;
  }

  private boolean _frugal;
 
  /**
   * Check whether this map property is frugal. A frugal map property removes its
   * internal collection whenever it becomes empty. If this happens alot, it may be better
   * to disabled frugalness.
   */
  public boolean isFrugal() {
  	return _frugal;
  }
 
  public int size() {
  	return _map.size();
  }
 
  private Map<K,V> _map;
  
  /**
   * Add the given key-value pair.
   *
   * @param key The key to be added.
   * @param value The value to be added.
   *
   * @post objects().contains(value);
   * @throws IllegalArgumentException: ! isValidValue(value); 
   */
  public synchronized V put(K key, V value) {
    V result = null;
    if(isValid(key, value)) {
      if(_map == null) {
    	_map = new HashMap<K,V>();
      }
      result = _map.put(key,value);
      return result;
    } else {
    	throw new IllegalArgumentException();
    }
  }
  
  /**
   * Check whether the given key-value pair is valid for this multiproperty.
   *
   * By default, any non-null value is allowed.
   */
  public boolean isValid(K key, V value) {
  	return key != null;
  }
  
  /**
   * Remove the given key from this multiproperty.
   */
  public synchronized V remove(K key) {
    V result = null;
    if(_map != null) {
      result = _map.remove(key);
      if(_frugal && _map.isEmpty()) {
      	_map = null;
      }
    }
    return result;
  }
  
  public synchronized Set<K> keySet() {
    if(_map != null) {
  	  return _map.keySet(); 
    } else {
      return new HashSet<K>();
    }
  }
  
  public synchronized List<K> keyList() {
    if(_map != null) {  	  return new ArrayList<K>(keySet());    } else {      return new ArrayList<K>();    }  }
  
  public boolean isEmpty() {
  	return _map == null || _map.isEmpty();
  }

  public boolean containsKey(K key) {
    if(_map == null) {
    	return false;
    } else {
  	  return _map.containsKey(key);
    }
  }

  public boolean containsValue(V value) {
    if(_map == null) {
    	return false;
    } else {
  	  return _map.containsValue(value);
    }
  }

  public V get(K key) {  	if(_map != null) {  		return _map.get(key);  	} else {  		return null;  	}  }
  
}
