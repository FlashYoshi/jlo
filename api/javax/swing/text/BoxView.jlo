package javax.swing.text;
public class BoxView extends javax.swing.text.CompositeView {
   public  BoxView(javax.swing.text.Element a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1){}
  public native void replace(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, javax.swing.text.View[] a_r_g_u_m_e_n_t_2) ;
  public native void setSize(float a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1) ;
  protected native int getOffset(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public native void paint(java.awt.Graphics a_r_g_u_m_e_n_t_0, java.awt.Shape a_r_g_u_m_e_n_t_1) ;
  public native int getWidth() ;
  public native int getHeight() ;
  protected native void layout(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public native int viewToModel(float a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1, java.awt.Shape a_r_g_u_m_e_n_t_2, javax.swing.text.Position.Bias[] a_r_g_u_m_e_n_t_3) ;
  public native java.awt.Shape modelToView(int a_r_g_u_m_e_n_t_0, java.awt.Shape a_r_g_u_m_e_n_t_1, javax.swing.text.Position.Bias a_r_g_u_m_e_n_t_2)  throws javax.swing.text.BadLocationException;
  public native void preferenceChanged(javax.swing.text.View a_r_g_u_m_e_n_t_0, boolean a_r_g_u_m_e_n_t_1, boolean a_r_g_u_m_e_n_t_2) ;
  native float getSpanOnAxis(int a_r_g_u_m_e_n_t_0) ;
  native void setSpanOnAxis(int a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1) ;
  public native float getPreferredSpan(int a_r_g_u_m_e_n_t_0) ;
  public native float getMinimumSpan(int a_r_g_u_m_e_n_t_0) ;
  public native float getMaximumSpan(int a_r_g_u_m_e_n_t_0) ;
  public native java.awt.Shape getChildAllocation(int a_r_g_u_m_e_n_t_0, java.awt.Shape a_r_g_u_m_e_n_t_1) ;
  public native float getAlignment(int a_r_g_u_m_e_n_t_0) ;
  public native int getResizeWeight(int a_r_g_u_m_e_n_t_0) ;
  protected native void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange a_r_g_u_m_e_n_t_0, javax.swing.event.DocumentEvent a_r_g_u_m_e_n_t_1, java.awt.Shape a_r_g_u_m_e_n_t_2, javax.swing.text.ViewFactory a_r_g_u_m_e_n_t_3) ;
  protected native boolean isLayoutValid(int a_r_g_u_m_e_n_t_0) ;
  protected native javax.swing.SizeRequirements calculateMinorAxisRequirements(int a_r_g_u_m_e_n_t_0, javax.swing.SizeRequirements a_r_g_u_m_e_n_t_1) ;
  protected native boolean flipEastAndWestAtEnds(int a_r_g_u_m_e_n_t_0, javax.swing.text.Position.Bias a_r_g_u_m_e_n_t_1) ;
  protected native int getSpan(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  protected native void paintChild(java.awt.Graphics a_r_g_u_m_e_n_t_0, java.awt.Rectangle a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public native void layoutChanged(int a_r_g_u_m_e_n_t_0) ;
  public native int getAxis() ;
  public native void setAxis(int a_r_g_u_m_e_n_t_0) ;
  native int[] updateLayoutArray(int[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  native void updateChildSizes() ;
  protected native boolean isAllocationValid() ;
  protected native boolean isBefore(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, java.awt.Rectangle a_r_g_u_m_e_n_t_2) ;
  protected native boolean isAfter(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, java.awt.Rectangle a_r_g_u_m_e_n_t_2) ;
  protected native javax.swing.text.View getViewAtPoint(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, java.awt.Rectangle a_r_g_u_m_e_n_t_2) ;
  protected native void childAllocation(int a_r_g_u_m_e_n_t_0, java.awt.Rectangle a_r_g_u_m_e_n_t_1) ;
  protected native void layoutMajorAxis(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int[] a_r_g_u_m_e_n_t_2, int[] a_r_g_u_m_e_n_t_3) ;
  protected native void layoutMinorAxis(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int[] a_r_g_u_m_e_n_t_2, int[] a_r_g_u_m_e_n_t_3) ;
  protected native javax.swing.SizeRequirements calculateMajorAxisRequirements(int a_r_g_u_m_e_n_t_0, javax.swing.SizeRequirements a_r_g_u_m_e_n_t_1) ;
  native void checkRequests(int a_r_g_u_m_e_n_t_0) ;
  protected native void baselineLayout(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int[] a_r_g_u_m_e_n_t_2, int[] a_r_g_u_m_e_n_t_3) ;
  protected native javax.swing.SizeRequirements baselineRequirements(int a_r_g_u_m_e_n_t_0, javax.swing.SizeRequirements a_r_g_u_m_e_n_t_1) ;
  int majorAxis;
  int majorSpan;
  int minorSpan;
  boolean majorReqValid;
  boolean minorReqValid;
  javax.swing.SizeRequirements majorRequest;
  javax.swing.SizeRequirements minorRequest;
  boolean majorAllocValid;
  int[] majorOffsets;
  int[] majorSpans;
  boolean minorAllocValid;
  int[] minorOffsets;
  int[] minorSpans;
  java.awt.Rectangle tempRect;
}