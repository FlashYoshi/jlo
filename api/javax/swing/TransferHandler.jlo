package javax.swing;
public class TransferHandler extends java.lang.Object implements java.io.Serializable {
   protected  TransferHandler(){}
   public  TransferHandler(java.lang.String a_r_g_u_m_e_n_t_0){}
  public static native javax.swing.Action getCutAction() ;
  public static native javax.swing.Action getCopyAction() ;
  public static native javax.swing.Action getPasteAction() ;
  public native void exportAsDrag(javax.swing.JComponent a_r_g_u_m_e_n_t_0, java.awt.event.InputEvent a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public native void exportToClipboard(javax.swing.JComponent a_r_g_u_m_e_n_t_0, java.awt.datatransfer.Clipboard a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2)  throws java.lang.IllegalStateException;
  public native boolean importData(javax.swing.JComponent a_r_g_u_m_e_n_t_0, java.awt.datatransfer.Transferable a_r_g_u_m_e_n_t_1) ;
  public native boolean importData(javax.swing.TransferHandler.TransferSupport a_r_g_u_m_e_n_t_0) ;
  public native boolean canImport(javax.swing.TransferHandler.TransferSupport a_r_g_u_m_e_n_t_0) ;
  public native boolean canImport(javax.swing.JComponent a_r_g_u_m_e_n_t_0, java.awt.datatransfer.DataFlavor[] a_r_g_u_m_e_n_t_1) ;
  public native int getSourceActions(javax.swing.JComponent a_r_g_u_m_e_n_t_0) ;
  public native javax.swing.Icon getVisualRepresentation(java.awt.datatransfer.Transferable a_r_g_u_m_e_n_t_0) ;
  protected native java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent a_r_g_u_m_e_n_t_0) ;
  protected native void exportDone(javax.swing.JComponent a_r_g_u_m_e_n_t_0, java.awt.datatransfer.Transferable a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public static final int NONE;
  public static final int COPY;
  public static final int MOVE;
  public static final int COPY_OR_MOVE;
  public static final int LINK;
  static final javax.swing.Action cutAction;
  static final javax.swing.Action copyAction;
  static final javax.swing.Action pasteAction;
  static class TransferAction extends sun.swing.UIAction implements javax.swing.plaf.UIResource {
      TransferAction(java.lang.String a_r_g_u_m_e_n_t_0){}
    public native boolean isEnabled(java.lang.Object a_r_g_u_m_e_n_t_0) ;
    public native void actionPerformed(java.awt.event.ActionEvent a_r_g_u_m_e_n_t_0) ;
  }
  private static class SwingDragGestureRecognizer extends java.awt.dnd.DragGestureRecognizer {
      SwingDragGestureRecognizer(java.awt.dnd.DragGestureListener a_r_g_u_m_e_n_t_0){}
    native void gestured(javax.swing.JComponent a_r_g_u_m_e_n_t_0, java.awt.event.MouseEvent a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3) ;
    protected native void registerListeners() ;
    protected native void unregisterListeners() ;
  }
  private static class DragHandler extends java.lang.Object implements java.awt.dnd.DragGestureListener, java.awt.dnd.DragSourceListener {
    public native void dragEnter(java.awt.dnd.DragSourceDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragOver(java.awt.dnd.DragSourceDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dropActionChanged(java.awt.dnd.DragSourceDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragExit(java.awt.dnd.DragSourceEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragGestureRecognized(java.awt.dnd.DragGestureEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragDropEnd(java.awt.dnd.DragSourceDropEvent a_r_g_u_m_e_n_t_0) ;
  }
  private static class DropHandler extends java.lang.Object implements java.awt.dnd.DropTargetListener, java.io.Serializable, java.awt.event.ActionListener {
    public native void actionPerformed(java.awt.event.ActionEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragEnter(java.awt.dnd.DropTargetDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragOver(java.awt.dnd.DropTargetDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dropActionChanged(java.awt.dnd.DropTargetDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragExit(java.awt.dnd.DropTargetEvent a_r_g_u_m_e_n_t_0) ;
    public native void drop(java.awt.dnd.DropTargetDropEvent a_r_g_u_m_e_n_t_0) ;
  }
  static class SwingDropTarget extends java.awt.dnd.DropTarget implements javax.swing.plaf.UIResource {
      SwingDropTarget(java.awt.Component a_r_g_u_m_e_n_t_0){}
    public native void addDropTargetListener(java.awt.dnd.DropTargetListener a_r_g_u_m_e_n_t_0)  throws java.util.TooManyListenersException;
    public native void removeDropTargetListener(java.awt.dnd.DropTargetListener a_r_g_u_m_e_n_t_0) ;
    public native void dragEnter(java.awt.dnd.DropTargetDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragOver(java.awt.dnd.DropTargetDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dropActionChanged(java.awt.dnd.DropTargetDragEvent a_r_g_u_m_e_n_t_0) ;
    public native void dragExit(java.awt.dnd.DropTargetEvent a_r_g_u_m_e_n_t_0) ;
    public native void drop(java.awt.dnd.DropTargetDropEvent a_r_g_u_m_e_n_t_0) ;
  }
  static class PropertyTransferable extends java.lang.Object implements java.awt.datatransfer.Transferable {
      PropertyTransferable(java.beans.PropertyDescriptor a_r_g_u_m_e_n_t_0, javax.swing.JComponent a_r_g_u_m_e_n_t_1){}
    public native java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor a_r_g_u_m_e_n_t_0)  throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException;
    public native java.awt.datatransfer.DataFlavor[] getTransferDataFlavors() ;
    public native boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor a_r_g_u_m_e_n_t_0) ;
    javax.swing.JComponent component;
    java.beans.PropertyDescriptor property;
  }
  public static final class TransferSupport extends java.lang.Object {
     public  TransferSupport(java.awt.Component a_r_g_u_m_e_n_t_0, java.awt.datatransfer.Transferable a_r_g_u_m_e_n_t_1){}
    public native java.awt.Component getComponent() ;
    public native java.awt.datatransfer.Transferable getTransferable() ;
    public native java.awt.datatransfer.DataFlavor[] getDataFlavors() ;
    public native javax.swing.TransferHandler.DropLocation getDropLocation() ;
    public native boolean isDrop() ;
    public native int getDropAction() ;
    public native boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor a_r_g_u_m_e_n_t_0) ;
    public native void setShowDropLocation(boolean a_r_g_u_m_e_n_t_0) ;
    public native void setDropAction(int a_r_g_u_m_e_n_t_0) ;
    public native int getUserDropAction() ;
    public native int getSourceDropActions() ;
    static final boolean $assertionsDisabled;
  }
  public static class DropLocation extends java.lang.Object {
     protected  DropLocation(java.awt.Point a_r_g_u_m_e_n_t_0){}
    public native java.lang.String toString() ;
    public final native java.awt.Point getDropPoint() ;
  }
  static abstract interface HasGetTransferHandler {
    public abstract javax.swing.TransferHandler getTransferHandler() ;
  }
}