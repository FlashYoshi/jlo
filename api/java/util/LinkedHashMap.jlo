package java.util;
public class LinkedHashMap<K extends java.lang.Object, V extends java.lang.Object> extends java.util.HashMap<K,V> implements java.util.Map<K,V> {
   public  LinkedHashMap(int a_r_g_u_m_e_n_t_0){}
   public  LinkedHashMap(){}
   public  LinkedHashMap(java.util.Map<? extends K,? extends V> a_r_g_u_m_e_n_t_0){}
   public  LinkedHashMap(int a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1, boolean a_r_g_u_m_e_n_t_2){}
   public  LinkedHashMap(int a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1){}
  public native V get(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native void clear() ;
  native void init() ;
  public native boolean containsValue(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  native void transfer(java.util.HashMap.Entry[] a_r_g_u_m_e_n_t_0) ;
  native void addEntry(int a_r_g_u_m_e_n_t_0, K a_r_g_u_m_e_n_t_1, V a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3) ;
  native void createEntry(int a_r_g_u_m_e_n_t_0, K a_r_g_u_m_e_n_t_1, V a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3) ;
  native java.util.Iterator<K> newKeyIterator() ;
  native java.util.Iterator<V> newValueIterator() ;
  native java.util.Iterator<java.util.Map.Entry<K,V>> newEntryIterator() ;
  protected native boolean removeEldestEntry(java.util.Map.Entry<K,V> a_r_g_u_m_e_n_t_0) ;
  private class EntryIterator extends java.util.LinkedHashMap.LinkedHashIterator<java.util.Map.Entry<K,V>> {
    public native java.util.Map.Entry<K,V> next() ;
    final java.util.LinkedHashMap this$0;
  }
  private class ValueIterator extends java.util.LinkedHashMap.LinkedHashIterator<V> {
    public native V next() ;
    final java.util.LinkedHashMap this$0;
  }
  private class KeyIterator extends java.util.LinkedHashMap.LinkedHashIterator<K> {
    public native K next() ;
    final java.util.LinkedHashMap this$0;
  }
  private abstract class LinkedHashIterator<T extends java.lang.Object> extends java.lang.Object implements java.util.Iterator<T> {
    public native boolean hasNext() ;
    public native void remove() ;
    native java.util.LinkedHashMap.Entry<K,V> nextEntry() ;
    java.util.LinkedHashMap.Entry<K,V> nextEntry;
    java.util.LinkedHashMap.Entry<K,V> lastReturned;
    int expectedModCount;
    final java.util.LinkedHashMap this$0;
  }
  private static class Entry<K extends java.lang.Object, V extends java.lang.Object> extends java.util.HashMap.Entry<K,V> {
      Entry(int a_r_g_u_m_e_n_t_0, K a_r_g_u_m_e_n_t_1, V a_r_g_u_m_e_n_t_2, java.util.HashMap.Entry<K,V> a_r_g_u_m_e_n_t_3){}
    native void recordAccess(java.util.HashMap<K,V> a_r_g_u_m_e_n_t_0) ;
    native void recordRemoval(java.util.HashMap<K,V> a_r_g_u_m_e_n_t_0) ;
    java.util.LinkedHashMap.Entry<K,V> before;
    java.util.LinkedHashMap.Entry<K,V> after;
  }
}