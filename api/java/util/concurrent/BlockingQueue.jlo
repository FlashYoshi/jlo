package java.util.concurrent;
public abstract interface BlockingQueue<E extends java.lang.Object> extends java.util.Queue<E> {
  public abstract boolean add(E a_r_g_u_m_e_n_t_0) ;
  public abstract void put(E a_r_g_u_m_e_n_t_0)  throws java.lang.InterruptedException;
  public abstract boolean contains(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public abstract boolean remove(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public abstract E poll(long a_r_g_u_m_e_n_t_0, java.util.concurrent.TimeUnit a_r_g_u_m_e_n_t_1)  throws java.lang.InterruptedException;
  public abstract boolean offer(E a_r_g_u_m_e_n_t_0, long a_r_g_u_m_e_n_t_1, java.util.concurrent.TimeUnit a_r_g_u_m_e_n_t_2)  throws java.lang.InterruptedException;
  public abstract boolean offer(E a_r_g_u_m_e_n_t_0) ;
  public abstract E take()  throws java.lang.InterruptedException;
  public abstract int remainingCapacity() ;
  public abstract int drainTo(java.util.Collection<? super E> a_r_g_u_m_e_n_t_0) ;
  public abstract int drainTo(java.util.Collection<? super E> a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
}