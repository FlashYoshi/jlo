package java.util.concurrent.locks;
public class ReentrantLock extends java.lang.Object implements java.util.concurrent.locks.Lock, java.io.Serializable {
   public  ReentrantLock(){}
   public  ReentrantLock(boolean a_r_g_u_m_e_n_t_0){}
  public native void lock() ;
  public native java.lang.String toString() ;
  protected native java.lang.Thread getOwner() ;
  public native void unlock() ;
  public native void lockInterruptibly()  throws java.lang.InterruptedException;
  public native boolean tryLock(long a_r_g_u_m_e_n_t_0, java.util.concurrent.TimeUnit a_r_g_u_m_e_n_t_1)  throws java.lang.InterruptedException;
  public native boolean tryLock() ;
  public native java.util.concurrent.locks.Condition newCondition() ;
  public native int getHoldCount() ;
  public native boolean isHeldByCurrentThread() ;
  public native boolean isLocked() ;
  public final native boolean isFair() ;
  public final native boolean hasQueuedThreads() ;
  public final native boolean hasQueuedThread(java.lang.Thread a_r_g_u_m_e_n_t_0) ;
  public final native int getQueueLength() ;
  protected native java.util.Collection<java.lang.Thread> getQueuedThreads() ;
  public native boolean hasWaiters(java.util.concurrent.locks.Condition a_r_g_u_m_e_n_t_0) ;
  public native int getWaitQueueLength(java.util.concurrent.locks.Condition a_r_g_u_m_e_n_t_0) ;
  protected native java.util.Collection<java.lang.Thread> getWaitingThreads(java.util.concurrent.locks.Condition a_r_g_u_m_e_n_t_0) ;
  static final class FairSync extends java.util.concurrent.locks.ReentrantLock.Sync {
      FairSync(){}
    final native void lock() ;
    protected final native boolean tryAcquire(int a_r_g_u_m_e_n_t_0) ;
  }
  static final class NonfairSync extends java.util.concurrent.locks.ReentrantLock.Sync {
      NonfairSync(){}
    final native void lock() ;
    protected final native boolean tryAcquire(int a_r_g_u_m_e_n_t_0) ;
  }
  static abstract class Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer {
      Sync(){}
    abstract void lock() ;
    final native java.lang.Thread getOwner() ;
    final native java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject newCondition() ;
    final native int getHoldCount() ;
    final native boolean isLocked() ;
    final native boolean nonfairTryAcquire(int a_r_g_u_m_e_n_t_0) ;
    protected final native boolean isHeldExclusively() ;
    protected final native boolean tryRelease(int a_r_g_u_m_e_n_t_0) ;
  }
}