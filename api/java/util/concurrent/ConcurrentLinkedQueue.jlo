package java.util.concurrent;
public class ConcurrentLinkedQueue<E extends java.lang.Object> extends java.util.AbstractQueue<E> implements java.util.Queue<E>, java.io.Serializable {
   public  ConcurrentLinkedQueue(){}
   public  ConcurrentLinkedQueue(java.util.Collection<? extends E> a_r_g_u_m_e_n_t_0){}
  public native boolean add(E a_r_g_u_m_e_n_t_0) ;
  public native boolean isEmpty() ;
  public native boolean contains(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native int size() ;
  public native <T extends java.lang.Object>T[] toArray(T[] a_r_g_u_m_e_n_t_0) ;
  public native java.lang.Object[] toArray() ;
  public native java.util.Iterator<E> iterator() ;
  public native boolean remove(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native E poll() ;
  public native E peek() ;
  public native boolean offer(E a_r_g_u_m_e_n_t_0) ;
  native java.util.concurrent.ConcurrentLinkedQueue.Node<E> first() ;
  private class Itr extends java.lang.Object implements java.util.Iterator<E> {
      Itr(java.util.concurrent.ConcurrentLinkedQueue a_r_g_u_m_e_n_t_0){}
    public native boolean hasNext() ;
    public native E next() ;
    public native void remove() ;
    final java.util.concurrent.ConcurrentLinkedQueue this$0;
  }
  private static class Node<E extends java.lang.Object> extends java.lang.Object {
      Node(E a_r_g_u_m_e_n_t_0){}
      Node(E a_r_g_u_m_e_n_t_0, java.util.concurrent.ConcurrentLinkedQueue.Node<E> a_r_g_u_m_e_n_t_1){}
    native java.util.concurrent.ConcurrentLinkedQueue.Node<E> getNext() ;
    native E getItem() ;
    native void setItem(E a_r_g_u_m_e_n_t_0) ;
    native boolean casNext(java.util.concurrent.ConcurrentLinkedQueue.Node<E> a_r_g_u_m_e_n_t_0, java.util.concurrent.ConcurrentLinkedQueue.Node<E> a_r_g_u_m_e_n_t_1) ;
    native boolean casItem(E a_r_g_u_m_e_n_t_0, E a_r_g_u_m_e_n_t_1) ;
    native void setNext(java.util.concurrent.ConcurrentLinkedQueue.Node<E> a_r_g_u_m_e_n_t_0) ;
  }
}