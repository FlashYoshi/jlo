package java.util.concurrent.atomic;
public abstract class AtomicIntegerFieldUpdater<T extends java.lang.Object> extends java.lang.Object {
   protected  AtomicIntegerFieldUpdater(){}
  public abstract int get(T a_r_g_u_m_e_n_t_0) ;
  public abstract void set(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public native int getAndAdd(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public abstract void lazySet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public native int getAndSet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public abstract boolean compareAndSet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public abstract boolean weakCompareAndSet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public native int getAndIncrement(T a_r_g_u_m_e_n_t_0) ;
  public native int getAndDecrement(T a_r_g_u_m_e_n_t_0) ;
  public native int incrementAndGet(T a_r_g_u_m_e_n_t_0) ;
  public native int decrementAndGet(T a_r_g_u_m_e_n_t_0) ;
  public native int addAndGet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public static native <U extends java.lang.Object>java.util.concurrent.atomic.AtomicIntegerFieldUpdater<U> newUpdater(java.lang.Class<U> a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1) ;
  private static class AtomicIntegerFieldUpdaterImpl<T extends java.lang.Object> extends java.util.concurrent.atomic.AtomicIntegerFieldUpdater<T> {
      AtomicIntegerFieldUpdaterImpl(java.lang.Class<T> a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1){}
    public final native int get(T a_r_g_u_m_e_n_t_0) ;
    public native void set(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
    public native void lazySet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
    public native boolean compareAndSet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
    public native boolean weakCompareAndSet(T a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  }
}