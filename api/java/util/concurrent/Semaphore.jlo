package java.util.concurrent;
public class Semaphore extends java.lang.Object implements java.io.Serializable {
   public  Semaphore(int a_r_g_u_m_e_n_t_0){}
   public  Semaphore(int a_r_g_u_m_e_n_t_0, boolean a_r_g_u_m_e_n_t_1){}
  public native java.lang.String toString() ;
  public native void acquire(int a_r_g_u_m_e_n_t_0)  throws java.lang.InterruptedException;
  public native void acquire()  throws java.lang.InterruptedException;
  public native void release(int a_r_g_u_m_e_n_t_0) ;
  public native void release() ;
  public native boolean isFair() ;
  public final native boolean hasQueuedThreads() ;
  public final native int getQueueLength() ;
  protected native java.util.Collection<java.lang.Thread> getQueuedThreads() ;
  public native boolean tryAcquire(long a_r_g_u_m_e_n_t_0, java.util.concurrent.TimeUnit a_r_g_u_m_e_n_t_1)  throws java.lang.InterruptedException;
  public native boolean tryAcquire(int a_r_g_u_m_e_n_t_0) ;
  public native boolean tryAcquire(int a_r_g_u_m_e_n_t_0, long a_r_g_u_m_e_n_t_1, java.util.concurrent.TimeUnit a_r_g_u_m_e_n_t_2)  throws java.lang.InterruptedException;
  public native boolean tryAcquire() ;
  public native void acquireUninterruptibly() ;
  public native void acquireUninterruptibly(int a_r_g_u_m_e_n_t_0) ;
  public native int availablePermits() ;
  public native int drainPermits() ;
  protected native void reducePermits(int a_r_g_u_m_e_n_t_0) ;
  static final class FairSync extends java.util.concurrent.Semaphore.Sync {
      FairSync(int a_r_g_u_m_e_n_t_0){}
    protected native int tryAcquireShared(int a_r_g_u_m_e_n_t_0) ;
  }
  static final class NonfairSync extends java.util.concurrent.Semaphore.Sync {
      NonfairSync(int a_r_g_u_m_e_n_t_0){}
    protected native int tryAcquireShared(int a_r_g_u_m_e_n_t_0) ;
  }
  static abstract class Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer {
      Sync(int a_r_g_u_m_e_n_t_0){}
    protected final native boolean tryReleaseShared(int a_r_g_u_m_e_n_t_0) ;
    final native int drainPermits() ;
    final native void reducePermits(int a_r_g_u_m_e_n_t_0) ;
    final native int nonfairTryAcquireShared(int a_r_g_u_m_e_n_t_0) ;
    final native int getPermits() ;
  }
}