package java.util.concurrent;
public class FutureTask<V extends java.lang.Object> extends java.lang.Object {
   public  FutureTask(java.util.concurrent.Callable<V> a_r_g_u_m_e_n_t_0){}
   public  FutureTask(java.lang.Runnable a_r_g_u_m_e_n_t_0, V a_r_g_u_m_e_n_t_1){}
  public native void run() ;
  public native V get(long a_r_g_u_m_e_n_t_0, java.util.concurrent.TimeUnit a_r_g_u_m_e_n_t_1)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  public native V get()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  protected native void set(V a_r_g_u_m_e_n_t_0) ;
  public native boolean cancel(boolean a_r_g_u_m_e_n_t_0) ;
  public native boolean isDone() ;
  public native boolean isCancelled() ;
  protected native void done() ;
  protected native void setException(java.lang.Throwable a_r_g_u_m_e_n_t_0) ;
  protected native boolean runAndReset() ;
  private final class Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer {
      Sync(java.util.concurrent.Callable<V> a_r_g_u_m_e_n_t_0){}
    protected native int tryAcquireShared(int a_r_g_u_m_e_n_t_0) ;
    protected native boolean tryReleaseShared(int a_r_g_u_m_e_n_t_0) ;
    native boolean innerIsCancelled() ;
    native boolean innerIsDone() ;
    native boolean innerCancel(boolean a_r_g_u_m_e_n_t_0) ;
    native V innerGet()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
    native V innerGet(long a_r_g_u_m_e_n_t_0)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
    native void innerSet(V a_r_g_u_m_e_n_t_0) ;
    native void innerSetException(java.lang.Throwable a_r_g_u_m_e_n_t_0) ;
    native void innerRun() ;
    native boolean innerRunAndReset() ;
    final java.util.concurrent.FutureTask this$0;
  }
}