package java.util;
public final class Formatter extends java.lang.Object implements java.io.Closeable, java.io.Flushable {
   public  Formatter(java.io.OutputStream a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1, java.util.Locale a_r_g_u_m_e_n_t_2) throws java.io.UnsupportedEncodingException{}
   public  Formatter(){}
   public  Formatter(java.lang.Appendable a_r_g_u_m_e_n_t_0){}
   public  Formatter(java.util.Locale a_r_g_u_m_e_n_t_0){}
   public  Formatter(java.lang.Appendable a_r_g_u_m_e_n_t_0, java.util.Locale a_r_g_u_m_e_n_t_1){}
   public  Formatter(java.lang.String a_r_g_u_m_e_n_t_0) throws java.io.FileNotFoundException{}
   public  Formatter(java.lang.String a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException{}
   public  Formatter(java.lang.String a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1, java.util.Locale a_r_g_u_m_e_n_t_2) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException{}
   public  Formatter(java.io.File a_r_g_u_m_e_n_t_0) throws java.io.FileNotFoundException{}
   public  Formatter(java.io.File a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException{}
   public  Formatter(java.io.File a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1, java.util.Locale a_r_g_u_m_e_n_t_2) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException{}
   public  Formatter(java.io.PrintStream a_r_g_u_m_e_n_t_0){}
   public  Formatter(java.io.OutputStream a_r_g_u_m_e_n_t_0){}
   public  Formatter(java.io.OutputStream a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1) throws java.io.UnsupportedEncodingException{}
  public native java.lang.String toString() ;
  public transient native java.util.Formatter format(java.util.Locale a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1, java.lang.Object... a_r_g_u_m_e_n_t_2) ;
  public transient native java.util.Formatter format(java.lang.String a_r_g_u_m_e_n_t_0, java.lang.Object... a_r_g_u_m_e_n_t_1) ;
  public native java.lang.Appendable out() ;
  public native void flush() ;
  public native void close() ;
  public native java.util.Locale locale() ;
  public native java.io.IOException ioException() ;
  private static class DateTime extends java.lang.Object {
    static native boolean isValid(char a_r_g_u_m_e_n_t_0) ;
    static final char HOUR_OF_DAY_0;
    static final char HOUR_0;
    static final char HOUR_OF_DAY;
    static final char HOUR;
    static final char MINUTE;
    static final char NANOSECOND;
    static final char MILLISECOND;
    static final char MILLISECOND_SINCE_EPOCH;
    static final char AM_PM;
    static final char SECONDS_SINCE_EPOCH;
    static final char SECOND;
    static final char TIME;
    static final char ZONE_NUMERIC;
    static final char ZONE;
    static final char NAME_OF_DAY_ABBREV;
    static final char NAME_OF_DAY;
    static final char NAME_OF_MONTH_ABBREV;
    static final char NAME_OF_MONTH;
    static final char CENTURY;
    static final char DAY_OF_MONTH_0;
    static final char DAY_OF_MONTH;
    static final char NAME_OF_MONTH_ABBREV_X;
    static final char DAY_OF_YEAR;
    static final char MONTH;
    static final char YEAR_2;
    static final char YEAR_4;
    static final char TIME_12_HOUR;
    static final char TIME_24_HOUR;
    static final char DATE_TIME;
    static final char DATE;
    static final char ISO_STANDARD_DATE;
  }
  private static class Conversion extends java.lang.Object {
    static native boolean isValid(char a_r_g_u_m_e_n_t_0) ;
    static native boolean isGeneral(char a_r_g_u_m_e_n_t_0) ;
    static native boolean isCharacter(char a_r_g_u_m_e_n_t_0) ;
    static native boolean isInteger(char a_r_g_u_m_e_n_t_0) ;
    static native boolean isFloat(char a_r_g_u_m_e_n_t_0) ;
    static native boolean isText(char a_r_g_u_m_e_n_t_0) ;
    static final char DECIMAL_INTEGER;
    static final char OCTAL_INTEGER;
    static final char HEXADECIMAL_INTEGER;
    static final char HEXADECIMAL_INTEGER_UPPER;
    static final char SCIENTIFIC;
    static final char SCIENTIFIC_UPPER;
    static final char GENERAL;
    static final char GENERAL_UPPER;
    static final char DECIMAL_FLOAT;
    static final char HEXADECIMAL_FLOAT;
    static final char HEXADECIMAL_FLOAT_UPPER;
    static final char CHARACTER;
    static final char CHARACTER_UPPER;
    static final char DATE_TIME;
    static final char DATE_TIME_UPPER;
    static final char BOOLEAN;
    static final char BOOLEAN_UPPER;
    static final char STRING;
    static final char STRING_UPPER;
    static final char HASHCODE;
    static final char HASHCODE_UPPER;
    static final char LINE_SEPARATOR;
    static final char PERCENT_SIGN;
  }
  private static class Flags extends java.lang.Object {
    public static native java.lang.String toString(java.util.Formatter.Flags a_r_g_u_m_e_n_t_0) ;
    public native java.lang.String toString() ;
    public native boolean contains(java.util.Formatter.Flags a_r_g_u_m_e_n_t_0) ;
    public native int valueOf() ;
    public native java.util.Formatter.Flags remove(java.util.Formatter.Flags a_r_g_u_m_e_n_t_0) ;
    public static native java.util.Formatter.Flags parse(java.lang.String a_r_g_u_m_e_n_t_0) ;
    public native java.util.Formatter.Flags dup() ;
    static final java.util.Formatter.Flags NONE;
    static final java.util.Formatter.Flags LEFT_JUSTIFY;
    static final java.util.Formatter.Flags UPPERCASE;
    static final java.util.Formatter.Flags ALTERNATE;
    static final java.util.Formatter.Flags PLUS;
    static final java.util.Formatter.Flags LEADING_SPACE;
    static final java.util.Formatter.Flags ZERO_PAD;
    static final java.util.Formatter.Flags GROUP;
    static final java.util.Formatter.Flags PARENTHESES;
    static final java.util.Formatter.Flags PREVIOUS;
  }
  private class FormatSpecifier extends java.lang.Object implements java.util.Formatter.FormatString {
      FormatSpecifier(java.util.Formatter a_r_g_u_m_e_n_t_0, java.util.Formatter a_r_g_u_m_e_n_t_1, java.lang.String[] a_r_g_u_m_e_n_t_2){}
    public native java.lang.String toString() ;
    public native void print(java.lang.Object a_r_g_u_m_e_n_t_0, java.util.Locale a_r_g_u_m_e_n_t_1)  throws java.io.IOException;
    public native int index() ;
    native java.util.Formatter.Flags flags() ;
    native int width() ;
    native int precision() ;
    static final boolean $assertionsDisabled;
    final java.util.Formatter this$0;
    private class BigDecimalLayout extends java.lang.Object {
       public  BigDecimalLayout(java.util.Formatter.FormatSpecifier a_r_g_u_m_e_n_t_0, java.math.BigInteger a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, java.util.Formatter.BigDecimalLayoutForm a_r_g_u_m_e_n_t_3){}
      public native int scale() ;
      public native char[] layoutChars() ;
      public native char[] mantissa() ;
      public native char[] exponent() ;
      public native boolean hasDot() ;
      final java.util.Formatter.FormatSpecifier this$1;
    }
  }
  public static final class BigDecimalLayoutForm extends java.lang.Enum<java.util.Formatter.BigDecimalLayoutForm> {
    public static native java.util.Formatter.BigDecimalLayoutForm valueOf(java.lang.String a_r_g_u_m_e_n_t_0) ;
    public static native java.util.Formatter.BigDecimalLayoutForm[] values() ;
    public static final java.util.Formatter.BigDecimalLayoutForm SCIENTIFIC;
    public static final java.util.Formatter.BigDecimalLayoutForm DECIMAL_FLOAT;
  }
  private class FixedString extends java.lang.Object implements java.util.Formatter.FormatString {
      FixedString(java.util.Formatter a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1){}
    public native java.lang.String toString() ;
    public native void print(java.lang.Object a_r_g_u_m_e_n_t_0, java.util.Locale a_r_g_u_m_e_n_t_1)  throws java.io.IOException;
    public native int index() ;
    final java.util.Formatter this$0;
  }
  private static abstract interface FormatString {
    public abstract java.lang.String toString() ;
    public abstract void print(java.lang.Object a_r_g_u_m_e_n_t_0, java.util.Locale a_r_g_u_m_e_n_t_1)  throws java.io.IOException;
    public abstract int index() ;
  }
}