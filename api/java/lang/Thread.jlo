package java.lang;
public class Thread extends java.lang.Object implements java.lang.Runnable {
   public  Thread(java.lang.ThreadGroup a_r_g_u_m_e_n_t_0, java.lang.Runnable a_r_g_u_m_e_n_t_1){}
   public  Thread(java.lang.ThreadGroup a_r_g_u_m_e_n_t_0, java.lang.Runnable a_r_g_u_m_e_n_t_1, java.lang.String a_r_g_u_m_e_n_t_2, long a_r_g_u_m_e_n_t_3){}
   public  Thread(java.lang.ThreadGroup a_r_g_u_m_e_n_t_0, java.lang.Runnable a_r_g_u_m_e_n_t_1, java.lang.String a_r_g_u_m_e_n_t_2){}
   public  Thread(java.lang.Runnable a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1){}
   public  Thread(java.lang.Runnable a_r_g_u_m_e_n_t_0){}
   public  Thread(java.lang.ThreadGroup a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1){}
   public  Thread(java.lang.String a_r_g_u_m_e_n_t_0){}
   public  Thread(){}
  public native void run() ;
  public native boolean isInterrupted() ;
  public static native java.lang.Thread currentThread() ;
  public native java.lang.String toString() ;
  public final native java.lang.String getName() ;
  public final native java.lang.ThreadGroup getThreadGroup() ;
  public native java.lang.StackTraceElement[] getStackTrace() ;
  public static native void dumpStack() ;
  public final native void setPriority(int a_r_g_u_m_e_n_t_0) ;
  public final native void setDaemon(boolean a_r_g_u_m_e_n_t_0) ;
  public synchronized native void start() ;
  native void blockedOn(sun.nio.ch.Interruptible a_r_g_u_m_e_n_t_0) ;
  public static native void yield() ;
  public static native void sleep(long a_r_g_u_m_e_n_t_0)  throws java.lang.InterruptedException;
  public static native void sleep(long a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1)  throws java.lang.InterruptedException;
  public final native void stop() ;
  public final synchronized native void stop(java.lang.Throwable a_r_g_u_m_e_n_t_0) ;
  public native void interrupt() ;
  public static native boolean interrupted() ;
  public native void destroy() ;
  public final native boolean isAlive() ;
  public final native void suspend() ;
  public final native void resume() ;
  public final native int getPriority() ;
  public final native void setName(java.lang.String a_r_g_u_m_e_n_t_0) ;
  public static native int activeCount() ;
  public static native int enumerate(java.lang.Thread[] a_r_g_u_m_e_n_t_0) ;
  public native int countStackFrames() ;
  public final native void join()  throws java.lang.InterruptedException;
  public final synchronized native void join(long a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1)  throws java.lang.InterruptedException;
  public final synchronized native void join(long a_r_g_u_m_e_n_t_0)  throws java.lang.InterruptedException;
  public final native boolean isDaemon() ;
  public final native void checkAccess() ;
  public native java.lang.ClassLoader getContextClassLoader() ;
  public native void setContextClassLoader(java.lang.ClassLoader a_r_g_u_m_e_n_t_0) ;
  public static native boolean holdsLock(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public static native java.util.Map<java.lang.Thread,java.lang.StackTraceElement[]> getAllStackTraces() ;
  public native long getId() ;
  public native java.lang.Thread.State getState() ;
  public static native void setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler a_r_g_u_m_e_n_t_0) ;
  public static native java.lang.Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler() ;
  public native java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler() ;
  public native void setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler a_r_g_u_m_e_n_t_0) ;
  java.lang.ThreadLocal.ThreadLocalMap threadLocals;
  java.lang.ThreadLocal.ThreadLocalMap inheritableThreadLocals;
  volatile java.lang.Object parkBlocker;
  public static final int MIN_PRIORITY;
  public static final int NORM_PRIORITY;
  public static final int MAX_PRIORITY;
  public static abstract interface UncaughtExceptionHandler {
    public abstract void uncaughtException(java.lang.Thread a_r_g_u_m_e_n_t_0, java.lang.Throwable a_r_g_u_m_e_n_t_1) ;
  }
  public static final class State extends java.lang.Enum<java.lang.Thread.State> {
    public static native java.lang.Thread.State valueOf(java.lang.String a_r_g_u_m_e_n_t_0) ;
    public static native java.lang.Thread.State[] values() ;
    public static final java.lang.Thread.State NEW;
    public static final java.lang.Thread.State RUNNABLE;
    public static final java.lang.Thread.State BLOCKED;
    public static final java.lang.Thread.State WAITING;
    public static final java.lang.Thread.State TIMED_WAITING;
    public static final java.lang.Thread.State TERMINATED;
  }
}