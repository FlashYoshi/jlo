package java.nio;
public abstract class CharBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.CharBuffer>, java.lang.Appendable, java.lang.CharSequence, java.lang.Readable {
    CharBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3, char[] a_r_g_u_m_e_n_t_4, int a_r_g_u_m_e_n_t_5){}
    CharBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3){}
  public native java.nio.CharBuffer get(char[] a_r_g_u_m_e_n_t_0) ;
  public native java.nio.CharBuffer get(char[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public abstract char get() ;
  public abstract char get(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.CharBuffer put(int a_r_g_u_m_e_n_t_0, char a_r_g_u_m_e_n_t_1) ;
  public abstract java.nio.CharBuffer put(char a_r_g_u_m_e_n_t_0) ;
  public final native java.nio.CharBuffer put(java.lang.String a_r_g_u_m_e_n_t_0) ;
  public native java.nio.CharBuffer put(java.lang.String a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public final native java.nio.CharBuffer put(char[] a_r_g_u_m_e_n_t_0) ;
  public native java.nio.CharBuffer put(char[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public native java.nio.CharBuffer put(java.nio.CharBuffer a_r_g_u_m_e_n_t_0) ;
  public native int hashCode() ;
  public native boolean equals(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native int compareTo(java.nio.CharBuffer a_r_g_u_m_e_n_t_0) ;
  abstract java.lang.String toString(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public native java.lang.String toString() ;
  public native java.nio.CharBuffer append(java.lang.CharSequence a_r_g_u_m_e_n_t_0) ;
  public native java.nio.CharBuffer append(java.lang.CharSequence a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public native java.nio.CharBuffer append(char a_r_g_u_m_e_n_t_0) ;
  public final native int length() ;
  public final native char charAt(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.lang.CharSequence subSequence(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public abstract boolean isDirect() ;
  public final native boolean hasArray() ;
  public final native char[] array() ;
  public final native int arrayOffset() ;
  public static native java.nio.CharBuffer wrap(java.lang.CharSequence a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public static native java.nio.CharBuffer wrap(char[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public static native java.nio.CharBuffer wrap(char[] a_r_g_u_m_e_n_t_0) ;
  public static native java.nio.CharBuffer wrap(java.lang.CharSequence a_r_g_u_m_e_n_t_0) ;
  public native int read(java.nio.CharBuffer a_r_g_u_m_e_n_t_0)  throws java.io.IOException;
  public static native java.nio.CharBuffer allocate(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.CharBuffer duplicate() ;
  public abstract java.nio.CharBuffer slice() ;
  public abstract java.nio.CharBuffer asReadOnlyBuffer() ;
  public abstract java.nio.CharBuffer compact() ;
  public abstract java.nio.ByteOrder order() ;
  final char[] hb;
  final int offset;
  boolean isReadOnly;
}