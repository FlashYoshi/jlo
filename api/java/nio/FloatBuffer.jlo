package java.nio;
public abstract class FloatBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.FloatBuffer> {
    FloatBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3){}
    FloatBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3, float[] a_r_g_u_m_e_n_t_4, int a_r_g_u_m_e_n_t_5){}
  public abstract float get() ;
  public native java.nio.FloatBuffer get(float[] a_r_g_u_m_e_n_t_0) ;
  public native java.nio.FloatBuffer get(float[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public abstract float get(int a_r_g_u_m_e_n_t_0) ;
  public native java.nio.FloatBuffer put(java.nio.FloatBuffer a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.FloatBuffer put(float a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.FloatBuffer put(int a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1) ;
  public native java.nio.FloatBuffer put(float[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public final native java.nio.FloatBuffer put(float[] a_r_g_u_m_e_n_t_0) ;
  public native int hashCode() ;
  public native boolean equals(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native int compareTo(java.nio.FloatBuffer a_r_g_u_m_e_n_t_0) ;
  public native java.lang.String toString() ;
  public abstract boolean isDirect() ;
  public final native boolean hasArray() ;
  public final native float[] array() ;
  public final native int arrayOffset() ;
  public static native java.nio.FloatBuffer wrap(float[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public static native java.nio.FloatBuffer wrap(float[] a_r_g_u_m_e_n_t_0) ;
  public static native java.nio.FloatBuffer allocate(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.FloatBuffer duplicate() ;
  public abstract java.nio.FloatBuffer slice() ;
  public abstract java.nio.FloatBuffer asReadOnlyBuffer() ;
  public abstract java.nio.FloatBuffer compact() ;
  public abstract java.nio.ByteOrder order() ;
  final float[] hb;
  final int offset;
  boolean isReadOnly;
}