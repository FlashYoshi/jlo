package java.nio;
public abstract class ByteBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.ByteBuffer> {
    ByteBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3){}
    ByteBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3, byte[] a_r_g_u_m_e_n_t_4, int a_r_g_u_m_e_n_t_5){}
  public abstract byte get() ;
  public native java.nio.ByteBuffer get(byte[] a_r_g_u_m_e_n_t_0) ;
  public native java.nio.ByteBuffer get(byte[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public abstract byte get(int a_r_g_u_m_e_n_t_0) ;
  public final native java.nio.ByteBuffer put(byte[] a_r_g_u_m_e_n_t_0) ;
  public native java.nio.ByteBuffer put(java.nio.ByteBuffer a_r_g_u_m_e_n_t_0) ;
  public native java.nio.ByteBuffer put(byte[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public abstract java.nio.ByteBuffer put(byte a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer put(int a_r_g_u_m_e_n_t_0, byte a_r_g_u_m_e_n_t_1) ;
  public native int hashCode() ;
  public native boolean equals(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native int compareTo(java.nio.ByteBuffer a_r_g_u_m_e_n_t_0) ;
  public abstract short getShort(int a_r_g_u_m_e_n_t_0) ;
  public abstract short getShort() ;
  public abstract java.nio.ByteBuffer putShort(int a_r_g_u_m_e_n_t_0, short a_r_g_u_m_e_n_t_1) ;
  public abstract java.nio.ByteBuffer putShort(short a_r_g_u_m_e_n_t_0) ;
  public abstract char getChar() ;
  public abstract char getChar(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer putChar(int a_r_g_u_m_e_n_t_0, char a_r_g_u_m_e_n_t_1) ;
  public abstract java.nio.ByteBuffer putChar(char a_r_g_u_m_e_n_t_0) ;
  public abstract int getInt() ;
  public abstract int getInt(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer putInt(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) ;
  public abstract java.nio.ByteBuffer putInt(int a_r_g_u_m_e_n_t_0) ;
  public abstract long getLong(int a_r_g_u_m_e_n_t_0) ;
  public abstract long getLong() ;
  public abstract java.nio.ByteBuffer putLong(int a_r_g_u_m_e_n_t_0, long a_r_g_u_m_e_n_t_1) ;
  public abstract java.nio.ByteBuffer putLong(long a_r_g_u_m_e_n_t_0) ;
  public abstract float getFloat(int a_r_g_u_m_e_n_t_0) ;
  public abstract float getFloat() ;
  public abstract java.nio.ByteBuffer putFloat(float a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer putFloat(int a_r_g_u_m_e_n_t_0, float a_r_g_u_m_e_n_t_1) ;
  public abstract double getDouble(int a_r_g_u_m_e_n_t_0) ;
  public abstract double getDouble() ;
  public abstract java.nio.ByteBuffer putDouble(double a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer putDouble(int a_r_g_u_m_e_n_t_0, double a_r_g_u_m_e_n_t_1) ;
  public native java.lang.String toString() ;
  public abstract boolean isDirect() ;
  public final native boolean hasArray() ;
  public final native byte[] array() ;
  public final native int arrayOffset() ;
  public static native java.nio.ByteBuffer wrap(byte[] a_r_g_u_m_e_n_t_0) ;
  public static native java.nio.ByteBuffer wrap(byte[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public static native java.nio.ByteBuffer allocate(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer duplicate() ;
  public static native java.nio.ByteBuffer allocateDirect(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ByteBuffer slice() ;
  public abstract java.nio.ByteBuffer asReadOnlyBuffer() ;
  public abstract java.nio.ByteBuffer compact() ;
  public final native java.nio.ByteBuffer order(java.nio.ByteOrder a_r_g_u_m_e_n_t_0) ;
  public final native java.nio.ByteOrder order() ;
  abstract byte _get(int a_r_g_u_m_e_n_t_0) ;
  abstract void _put(int a_r_g_u_m_e_n_t_0, byte a_r_g_u_m_e_n_t_1) ;
  public abstract java.nio.CharBuffer asCharBuffer() ;
  public abstract java.nio.ShortBuffer asShortBuffer() ;
  public abstract java.nio.IntBuffer asIntBuffer() ;
  public abstract java.nio.LongBuffer asLongBuffer() ;
  public abstract java.nio.FloatBuffer asFloatBuffer() ;
  public abstract java.nio.DoubleBuffer asDoubleBuffer() ;
  final byte[] hb;
  final int offset;
  boolean isReadOnly;
  boolean bigEndian;
  boolean nativeByteOrder;
}