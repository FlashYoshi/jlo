package java.nio;
public abstract class ShortBuffer extends java.nio.Buffer implements java.lang.Comparable<java.nio.ShortBuffer> {
    ShortBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3){}
    ShortBuffer(int a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2, int a_r_g_u_m_e_n_t_3, short[] a_r_g_u_m_e_n_t_4, int a_r_g_u_m_e_n_t_5){}
  public abstract short get() ;
  public native java.nio.ShortBuffer get(short[] a_r_g_u_m_e_n_t_0) ;
  public native java.nio.ShortBuffer get(short[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public abstract short get(int a_r_g_u_m_e_n_t_0) ;
  public native java.nio.ShortBuffer put(java.nio.ShortBuffer a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ShortBuffer put(short a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ShortBuffer put(int a_r_g_u_m_e_n_t_0, short a_r_g_u_m_e_n_t_1) ;
  public native java.nio.ShortBuffer put(short[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public final native java.nio.ShortBuffer put(short[] a_r_g_u_m_e_n_t_0) ;
  public native int hashCode() ;
  public native boolean equals(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native int compareTo(java.nio.ShortBuffer a_r_g_u_m_e_n_t_0) ;
  public native java.lang.String toString() ;
  public abstract boolean isDirect() ;
  public final native boolean hasArray() ;
  public final native short[] array() ;
  public final native int arrayOffset() ;
  public static native java.nio.ShortBuffer wrap(short[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2) ;
  public static native java.nio.ShortBuffer wrap(short[] a_r_g_u_m_e_n_t_0) ;
  public static native java.nio.ShortBuffer allocate(int a_r_g_u_m_e_n_t_0) ;
  public abstract java.nio.ShortBuffer duplicate() ;
  public abstract java.nio.ShortBuffer slice() ;
  public abstract java.nio.ShortBuffer asReadOnlyBuffer() ;
  public abstract java.nio.ShortBuffer compact() ;
  public abstract java.nio.ByteOrder order() ;
  final short[] hb;
  final int offset;
  boolean isReadOnly;
}