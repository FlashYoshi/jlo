package java.io;
public class PipedReader extends java.io.Reader {
   public  PipedReader(java.io.PipedWriter a_r_g_u_m_e_n_t_0) throws java.io.IOException{}
   public  PipedReader(java.io.PipedWriter a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) throws java.io.IOException{}
   public  PipedReader(){}
   public  PipedReader(int a_r_g_u_m_e_n_t_0){}
  public native void close()  throws java.io.IOException;
  public synchronized native int read()  throws java.io.IOException;
  public synchronized native int read(char[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2)  throws java.io.IOException;
  public native void connect(java.io.PipedWriter a_r_g_u_m_e_n_t_0)  throws java.io.IOException;
  public synchronized native boolean ready()  throws java.io.IOException;
  synchronized native void receive(char[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2)  throws java.io.IOException;
  synchronized native void receive(int a_r_g_u_m_e_n_t_0)  throws java.io.IOException;
  synchronized native void receivedLast() ;
  boolean closedByWriter;
  boolean closedByReader;
  boolean connected;
  java.lang.Thread readSide;
  java.lang.Thread writeSide;
  char[] buffer;
  int in;
  int out;
}