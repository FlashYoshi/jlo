package java.io;
public class File extends java.lang.Object implements java.io.Serializable, java.lang.Comparable<java.io.File> {
   public  File(java.lang.String a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1){}
   public  File(java.io.File a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1){}
   public  File(java.net.URI a_r_g_u_m_e_n_t_0){}
   public  File(java.lang.String a_r_g_u_m_e_n_t_0){}
  public native int hashCode() ;
  public native boolean equals(java.lang.Object a_r_g_u_m_e_n_t_0) ;
  public native int compareTo(java.io.File a_r_g_u_m_e_n_t_0) ;
  public native java.lang.String toString() ;
  public native java.lang.String getName() ;
  public native long length() ;
  public native java.lang.String getParent() ;
  public native boolean isAbsolute() ;
  public native java.lang.String getCanonicalPath()  throws java.io.IOException;
  public native boolean setReadOnly() ;
  public native java.lang.String[] list(java.io.FilenameFilter a_r_g_u_m_e_n_t_0) ;
  public native java.lang.String[] list() ;
  public native boolean delete() ;
  native int getPrefixLength() ;
  public native java.io.File getParentFile() ;
  public native java.lang.String getPath() ;
  public native java.lang.String getAbsolutePath() ;
  public native java.io.File getAbsoluteFile() ;
  public native java.io.File getCanonicalFile()  throws java.io.IOException;
  public native java.net.URL toURL()  throws java.net.MalformedURLException;
  public native java.net.URI toURI() ;
  public native boolean canRead() ;
  public native boolean canWrite() ;
  public native boolean exists() ;
  public native boolean isDirectory() ;
  public native boolean isFile() ;
  public native boolean isHidden() ;
  public native long lastModified() ;
  public native boolean createNewFile()  throws java.io.IOException;
  public native void deleteOnExit() ;
  public native java.io.File[] listFiles(java.io.FileFilter a_r_g_u_m_e_n_t_0) ;
  public native java.io.File[] listFiles() ;
  public native java.io.File[] listFiles(java.io.FilenameFilter a_r_g_u_m_e_n_t_0) ;
  public native boolean mkdir() ;
  public native boolean mkdirs() ;
  public native boolean renameTo(java.io.File a_r_g_u_m_e_n_t_0) ;
  public native boolean setLastModified(long a_r_g_u_m_e_n_t_0) ;
  public native boolean setWritable(boolean a_r_g_u_m_e_n_t_0, boolean a_r_g_u_m_e_n_t_1) ;
  public native boolean setWritable(boolean a_r_g_u_m_e_n_t_0) ;
  public native boolean setReadable(boolean a_r_g_u_m_e_n_t_0, boolean a_r_g_u_m_e_n_t_1) ;
  public native boolean setReadable(boolean a_r_g_u_m_e_n_t_0) ;
  public native boolean setExecutable(boolean a_r_g_u_m_e_n_t_0, boolean a_r_g_u_m_e_n_t_1) ;
  public native boolean setExecutable(boolean a_r_g_u_m_e_n_t_0) ;
  public native boolean canExecute() ;
  public static native java.io.File[] listRoots() ;
  public native long getTotalSpace() ;
  public native long getFreeSpace() ;
  public native long getUsableSpace() ;
  public static native java.io.File createTempFile(java.lang.String a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1)  throws java.io.IOException;
  public static native java.io.File createTempFile(java.lang.String a_r_g_u_m_e_n_t_0, java.lang.String a_r_g_u_m_e_n_t_1, java.io.File a_r_g_u_m_e_n_t_2)  throws java.io.IOException;
  public static final char separatorChar;
  public static final java.lang.String separator;
  public static final char pathSeparatorChar;
  public static final java.lang.String pathSeparator;
  static final boolean $assertionsDisabled;
  private static class LazyInitialization extends java.lang.Object {
    static native java.lang.String temporaryDirectory() ;
    static final java.security.SecureRandom random;
    static final java.lang.String temporaryDirectory;
  }
}