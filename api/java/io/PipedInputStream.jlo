package java.io;
public class PipedInputStream extends java.io.InputStream {
   public  PipedInputStream(java.io.PipedOutputStream a_r_g_u_m_e_n_t_0) throws java.io.IOException{}
   public  PipedInputStream(java.io.PipedOutputStream a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1) throws java.io.IOException{}
   public  PipedInputStream(){}
   public  PipedInputStream(int a_r_g_u_m_e_n_t_0){}
  public native void close()  throws java.io.IOException;
  public synchronized native int read()  throws java.io.IOException;
  public synchronized native int read(byte[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2)  throws java.io.IOException;
  public synchronized native int available()  throws java.io.IOException;
  public native void connect(java.io.PipedOutputStream a_r_g_u_m_e_n_t_0)  throws java.io.IOException;
  synchronized native void receive(byte[] a_r_g_u_m_e_n_t_0, int a_r_g_u_m_e_n_t_1, int a_r_g_u_m_e_n_t_2)  throws java.io.IOException;
  protected synchronized native void receive(int a_r_g_u_m_e_n_t_0)  throws java.io.IOException;
  synchronized native void receivedLast() ;
  boolean closedByWriter;
  volatile boolean closedByReader;
  boolean connected;
  java.lang.Thread readSide;
  java.lang.Thread writeSide;
  protected static final int PIPE_SIZE;
  protected byte[] buffer;
  protected int in;
  protected int out;
  static final boolean $assertionsDisabled;
}